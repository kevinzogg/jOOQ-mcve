/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.gen.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.gen.DefaultSchema;
import org.jooq.mcve.gen.Keys;
import org.jooq.mcve.gen.tables.records.BilProductRecord;
import org.jooq.mcve.model.TranslationMap;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BilProduct extends TableImpl<BilProductRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>BIL_PRODUCT</code>
     */
    public static final BilProduct BIL_PRODUCT = new BilProduct();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BilProductRecord> getRecordType() {
        return BilProductRecord.class;
    }

    /**
     * The column <code>BIL_PRODUCT.ID</code>.
     */
    public final TableField<BilProductRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>BIL_PRODUCT.PRODUCT_KEY</code>.
     */
    public final TableField<BilProductRecord, String> PRODUCT_KEY = createField(DSL.name("PRODUCT_KEY"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>BIL_PRODUCT.PRODUCT_NAME_I18N</code>.
     */
    public final TableField<BilProductRecord, TranslationMap> PRODUCT_NAME_I18N = createField(DSL.name("PRODUCT_NAME_I18N"), SQLDataType.VARCHAR(255).nullable(false), this, "", new org.jooq.impl.JPAConverter(org.jooq.mcve.model.TranslationMapAttributeConverter.class));

    private BilProduct(Name alias, Table<BilProductRecord> aliased) {
        this(alias, aliased, null);
    }

    private BilProduct(Name alias, Table<BilProductRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>BIL_PRODUCT</code> table reference
     */
    public BilProduct(String alias) {
        this(DSL.name(alias), BIL_PRODUCT);
    }

    /**
     * Create an aliased <code>BIL_PRODUCT</code> table reference
     */
    public BilProduct(Name alias) {
        this(alias, BIL_PRODUCT);
    }

    /**
     * Create a <code>BIL_PRODUCT</code> table reference
     */
    public BilProduct() {
        this(DSL.name("BIL_PRODUCT"), null);
    }

    public <O extends Record> BilProduct(Table<O> child, ForeignKey<O, BilProductRecord> key) {
        super(child, key, BIL_PRODUCT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<BilProductRecord, Long> getIdentity() {
        return (Identity<BilProductRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BilProductRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_B;
    }

    @Override
    public List<UniqueKey<BilProductRecord>> getKeys() {
        return Arrays.<UniqueKey<BilProductRecord>>asList(Keys.CONSTRAINT_B, Keys.UK_E3T9SR2LQDAAHJHOHOU84TKXA);
    }

    @Override
    public BilProduct as(String alias) {
        return new BilProduct(DSL.name(alias), this);
    }

    @Override
    public BilProduct as(Name alias) {
        return new BilProduct(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BilProduct rename(String name) {
        return new BilProduct(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BilProduct rename(Name name) {
        return new BilProduct(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, TranslationMap> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
